/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import java.awt.*;
import java.io.*;
import java.net.InetSocketAddress;
import java.nio.*;
import java.nio.channels.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingWorker;

/**
 *
 * @author gaish
 */
public class GameFrame extends javax.swing.JFrame {

    Locale russianLocale = new Locale("ru");
    Locale locale;

    class Check { //фишка

        boolean black;
        boolean isSuper;
        int x, y;

        Check(boolean isBlack, boolean isSuper, int x, int y) {
            this.black = isBlack;
            this.x = x;
            this.y = y;
            this.isSuper = isSuper;
        }

        boolean isHere(int x, int y) {
            return ((this.x == x) && (this.y == y));
        }
    }
    ArrayList<Check> listMine;
    ArrayList<Check> listOpponent;
    ArrayList<Point> pointsMine, pointsOpponent;
    Check selectedCheck;
    int xSelected = -1, ySelected = -1;
    Selector selector;
    ServerSocketChannel serverSocket;
    ByteBuffer buffer = ByteBuffer.allocate(256);
    public boolean choose = false;
    public String ip = "";
    public int port = 0;
    boolean game = false;
    String password = "";
    SocketChannel socket = null;
    boolean client = false, capture = false, yourStep = false, againMine = false, againOpp = false;
    Point kill = null;
    ArrayList<Point> killed = new ArrayList<Point>();
    ClientTask t;

    /**
     * Creates new form GameFrame
     */
    public GameFrame() {
        initComponents();
        locale = Locale.getDefault();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("app/Bundle"); // NOI18N
        setTitle(bundle.getString("GameFrame.title")); // NOI18N
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setMaximumSize(new java.awt.Dimension(440, 440));
        jPanel1.setMinimumSize(new java.awt.Dimension(440, 440));
        jPanel1.setPreferredSize(new java.awt.Dimension(440, 440));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 436, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 436, Short.MAX_VALUE)
        );

        jButton1.setText(bundle.getString("GameFrame.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(bundle.getString("GameFrame.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText(bundle.getString("GameFrame.jLabel1.text")); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton3.setText(bundle.getString("GameFrame.jButton3.text")); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText(bundle.getString("GameFrame.jLabel2.text")); // NOI18N

        jButton4.setText(bundle.getString("GameFrame.jButton4.text")); // NOI18N
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText(bundle.getString("GameFrame.jButton5.text")); // NOI18N
        jButton5.setEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(95, 95, 95)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jButton5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    byte[] ObjectToBytes(Object obj) {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ObjectOutput out = null;
        byte[] yourBytes = null;
        try {
            out = new ObjectOutputStream(bos);
            out.writeObject(obj);
            out.flush();
            yourBytes = bos.toByteArray();

        } catch (IOException ex) {
            Logger.getLogger(GameFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                bos.close();
            } catch (IOException ex) {
                // ignore close exception
            }
        }
        return yourBytes;
    }

    Object BytesToObject(byte[] arrayBytes) throws IOException {
        ByteArrayInputStream bis = new ByteArrayInputStream(arrayBytes);
        ObjectInput in = null;
        Object resp = null;
        try {
            in = new ObjectInputStream(bis);
            resp = in.readObject();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GameFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GameFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (IOException ex) {
                // ignore close exception
            }
        }
        return resp;
    }

    class ServerTask extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {
            while (true) {
                while (true) {
                    selector.select();
                    Set<SelectionKey> selectedKeys = selector.selectedKeys();
                    Iterator<SelectionKey> iter = selectedKeys.iterator();
                    while (iter.hasNext()) {

                        SelectionKey key = iter.next();

                        if (key.isAcceptable()) {
                            socket = serverSocket.accept();
                            if (!game) {
                                game = true;
                                socket.configureBlocking(false);
                                socket.register(selector, SelectionKey.OP_READ);
                                yourStep = true;
                                jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("YourMove"));
                            } else {
                                ArrayList<String> resp = new ArrayList<String>();
                                resp.add("9");
                                ByteBuffer msgBuf = ByteBuffer.wrap(ObjectToBytes(resp));
                                SocketChannel sch = (SocketChannel) key.channel();
                                sch.write(msgBuf);
                                msgBuf.rewind();
                                key.cancel();
                            }
                        }
                        if (key.isReadable()) {
                            handleRead(key);
                        }
                    }
                    iter.remove();
                }
            }
        }

        private void handleRead(SelectionKey key) throws IOException, SQLException {
            SocketChannel channel = (SocketChannel) key.channel();
            ByteBuffer buffer = ByteBuffer.allocate(2048);
            byte[] a = new byte[0];
            int read = 0;
            while ((read = channel.read(buffer)) > 0) {
                buffer.flip();
                byte[] bytes = new byte[buffer.limit()];
                buffer.get(bytes);
                byte[] newArray = new byte[a.length + bytes.length];
                System.arraycopy(a, 0, newArray, 0, a.length);
                System.arraycopy(bytes, 0, newArray, a.length, bytes.length);
                a = newArray;
                buffer.clear();
                System.out.println("R: " + read);
            }
            if (a.length == 0) {
                key.cancel();
                return;
            }
            ArrayList<String> msg = (ArrayList<String>) BytesToObject(a);
            ArrayList<String> resp = new ArrayList<String>();
            if (msg.get(0).trim().equals("0")) {
                if (msg.get(1).equals(password)) {
                    resp.add("7");
                    jButton4.setEnabled(true);
                    jButton5.setEnabled(true);
                } else {
                    resp.add("8");
                    ByteBuffer msgBuf = ByteBuffer.wrap(ObjectToBytes(resp));
                    SocketChannel sch = (SocketChannel) key.channel();
                    sch.write(msgBuf);
                    msgBuf.rewind();
                    key.cancel();
                    game = false;
                }
                ByteBuffer msgBuf = ByteBuffer.wrap(ObjectToBytes(resp));
                SocketChannel sch = (SocketChannel) key.channel();
                sch.write(msgBuf);
                msgBuf.rewind();
            }
            if (msg.get(0).trim().equals("1")) {
                Point oldPoint = new Point(7 - Integer.valueOf(msg.get(1)), 7 - Integer.valueOf(msg.get(2)));
                Point newPoint = new Point(7 - Integer.valueOf(msg.get(3)), 7 - Integer.valueOf(msg.get(4)));
                pointsOpponent.remove(oldPoint);
                pointsOpponent.add(newPoint);
                for (int i = 0; i < listOpponent.size(); i++) {
                    if (listOpponent.get(i).isHere(oldPoint.x, oldPoint.y)) {
                        Graphics2D g = (Graphics2D) jPanel1.getGraphics();
                        g.setColor(Color.GRAY);
                        g.fill(new Rectangle(20 + 50 * oldPoint.x, 20 + 50 * oldPoint.y, 50, 50));
                        g.setColor(Color.BLACK);
                        for (int j = 0; j <= 8; j++) {
                            g.drawLine(20 + 50 * j, 20, 20 + 50 * j, 420);
                            g.drawLine(20, 20 + 50 * j, 420, 20 + 50 * j);
                        }
                        if (newPoint.y == 7) {
                            listOpponent.get(i).isSuper = true;
                        }
                        listOpponent.get(i).x = newPoint.x;
                        listOpponent.get(i).y = newPoint.y;
                        jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("YourMove"));
                        yourStep = true;
                        jButton4.setEnabled(yourStep);
                        jButton5.setEnabled(yourStep);
                        drawCheck(jPanel1, listOpponent.get(i), false);
                        jTextArea1.append(String.valueOf((char) (65 + oldPoint.x)) + String.valueOf(8 - oldPoint.y) + "-" + String.valueOf((char) (65 + newPoint.x)) + String.valueOf(8 - newPoint.y) + "\r\n");
                    }
                }
            }
            if (msg.get(0).trim().equals("2")) {
                Point oldPoint = new Point(7 - Integer.valueOf(msg.get(1)), 7 - Integer.valueOf(msg.get(2)));
                Point newPoint = new Point(7 - Integer.valueOf(msg.get(3)), 7 - Integer.valueOf(msg.get(4)));
                Point killPoint = new Point(7 - Integer.valueOf(msg.get(5)), 7 - Integer.valueOf(msg.get(6)));
                pointsOpponent.remove(oldPoint);
                pointsOpponent.add(newPoint);
                for (int i = 0; i < listOpponent.size(); i++) {
                    if (listOpponent.get(i).isHere(oldPoint.x, oldPoint.y)) {
                        Graphics2D g = (Graphics2D) jPanel1.getGraphics();
                        g.setColor(Color.GRAY);
                        g.fill(new Rectangle(20 + 50 * oldPoint.x, 20 + 50 * oldPoint.y, 50, 50));
                        g.fill(new Rectangle(20 + 50 * killPoint.x, 20 + 50 * killPoint.y, 50, 50));
                        pointsMine.remove(killPoint);

                        for (int j = 0; j < listMine.size(); j++) {
                            if (listMine.get(j).isHere(killPoint.x, killPoint.y)) {
                                listMine.remove(j);
                            }
                        }
                        g.setColor(Color.BLACK);
                        for (int j = 0; j <= 8; j++) {
                            g.drawLine(20 + 50 * j, 20, 20 + 50 * j, 420);
                            g.drawLine(20, 20 + 50 * j, 420, 20 + 50 * j);
                        }
                        listOpponent.get(i).x = newPoint.x;
                        listOpponent.get(i).y = newPoint.y;
                        if (newPoint.y == 7) {
                            listOpponent.get(i).isSuper = true;
                        }
                        if (!msg.get(7).equals("3")) {
                            jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("YourMove"));
                            yourStep = true;
                            if (againOpp) {
                                jTextArea1.append(":" + String.valueOf((char) (65 + newPoint.x)) + String.valueOf(8 - newPoint.y) + "\r\n");
                            } else {
                                jTextArea1.append(String.valueOf((char) (65 + oldPoint.x)) + String.valueOf(8 - oldPoint.y) + ":" + String.valueOf((char) (65 + newPoint.x)) + String.valueOf(8 - newPoint.y) + "\r\n");
                            }

                            againOpp = false;
                        } else {
                            jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("OneMoreOpponent"));

                            yourStep = false;
                            if (againOpp) {
                                jTextArea1.append(":" + String.valueOf((char) (65 + newPoint.x)) + String.valueOf(8 - newPoint.y));
                            } else {
                                jTextArea1.append(String.valueOf((char) (65 + oldPoint.x)) + String.valueOf(8 - oldPoint.y) + ":" + String.valueOf((char) (65 + newPoint.x)) + String.valueOf(8 - newPoint.y));
                            }
                            againOpp = true;

                        }
                        drawCheck(jPanel1, listOpponent.get(i), false);

                        jButton4.setEnabled(yourStep);
                        jButton5.setEnabled(yourStep);
                        CheckEnd();
                    }
                }
            }
            if (msg.get(0).trim().equals("4")) {
                resp = new ArrayList<String>();

                if (JOptionPane.showConfirmDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("DrawPropose"), java.util.ResourceBundle.getBundle("app/Bundle").getString("Draw"), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    resp.add("40");
                } else {
                    resp.add("41");
                }

                ByteBuffer msgBuf = ByteBuffer.wrap(ObjectToBytes(resp));
                SocketChannel sch = (SocketChannel) key.channel();
                sch.write(msgBuf);
                msgBuf.rewind();
            }
            if (msg.get(0).trim().equals("40")) {
                JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("OpponentAgreedDraw"));
                EndGame();
                jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("Draw"));
            }
            if (msg.get(0).trim().equals("41")) {
                JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("OpponentRefuseDraw"));
            }
            if (msg.get(0).trim().equals("6")) {
                JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("OpponentSurrender"));
                EndGame();
                JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("OpponentSurrenderLabel"));
            }
        }

    }

    class ClientTask extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {
            while (true) {
                ByteBuffer buf = ByteBuffer.allocate(2048);
                socket.configureBlocking(false);
                byte[] a = new byte[0];
                int read = 0;

                try {
                    while ((read = socket.read(buf)) > 0) {
                        socket.configureBlocking(false);
                        buf.flip();
                        byte[] bytes = new byte[buf.limit()];
                        buf.get(bytes);
                        byte[] newArray = new byte[a.length + bytes.length];
                        System.arraycopy(a, 0, newArray, 0, a.length);
                        System.arraycopy(bytes, 0, newArray, a.length, bytes.length);
                        a = newArray;
                        buf.clear();
                        System.out.println("R: " + read);
                    }
                } catch (Exception e) {
                    Logger.getLogger(GameFrame.class.getName()).log(Level.SEVERE, null, e);
                    JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("ServerDisabled") + java.util.ResourceBundle.getBundle("app/Bundle").getString("GameEnd"), "Error!", JOptionPane.ERROR_MESSAGE);
                    EndGame();
                    jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("ServerDisabled"));
                    return null;
                }
                if (a.length == 0) {
                    continue;
                }
                System.out.println(new String(a));
                ArrayList<String> resp = (ArrayList<String>) BytesToObject(a);
                if (resp.get(0).equals("1")) {
                    Point oldPoint = new Point(7 - Integer.valueOf(resp.get(1)), 7 - Integer.valueOf(resp.get(2)));
                    Point newPoint = new Point(7 - Integer.valueOf(resp.get(3)), 7 - Integer.valueOf(resp.get(4)));
                    pointsOpponent.remove(oldPoint);
                    pointsOpponent.add(newPoint);
                    for (int i = 0; i < listOpponent.size(); i++) {
                        if (listOpponent.get(i).isHere(oldPoint.x, oldPoint.y)) {
                            Graphics2D g = (Graphics2D) jPanel1.getGraphics();
                            g.setColor(Color.GRAY);
                            g.fill(new Rectangle(20 + 50 * oldPoint.x, 20 + 50 * oldPoint.y, 50, 50));
                            g.setColor(Color.BLACK);
                            for (int j = 0; j <= 8; j++) {
                                g.drawLine(20 + 50 * j, 20, 20 + 50 * j, 420);
                                g.drawLine(20, 20 + 50 * j, 420, 20 + 50 * j);
                            }
                            listOpponent.get(i).x = newPoint.x;
                            listOpponent.get(i).y = newPoint.y;
                            if (newPoint.y == 7) {
                                listOpponent.get(i).isSuper = true;
                            }
                            jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("YourMove"));
                            yourStep = true;
                            jButton4.setEnabled(yourStep);
                            jButton5.setEnabled(yourStep);
                            drawCheck(jPanel1, listOpponent.get(i), false);
                            jTextArea1.append(String.valueOf((char) (72 - oldPoint.x)) + String.valueOf(1 + oldPoint.y) + "-" + String.valueOf((char) (72 - newPoint.x)) + String.valueOf(1 + newPoint.y) + "\r\n");
                        }
                    }
                }
                if (resp.get(0).trim().equals("2")) {
                    Point oldPoint = new Point(7 - Integer.valueOf(resp.get(1)), 7 - Integer.valueOf(resp.get(2)));
                    Point newPoint = new Point(7 - Integer.valueOf(resp.get(3)), 7 - Integer.valueOf(resp.get(4)));
                    Point killPoint = new Point(7 - Integer.valueOf(resp.get(5)), 7 - Integer.valueOf(resp.get(6)));
                    pointsOpponent.remove(oldPoint);
                    pointsOpponent.add(newPoint);
                    for (int i = 0; i < listOpponent.size(); i++) {
                        if (listOpponent.get(i).isHere(oldPoint.x, oldPoint.y)) {
                            Graphics2D g = (Graphics2D) jPanel1.getGraphics();
                            g.setColor(Color.GRAY);
                            g.fill(new Rectangle(20 + 50 * oldPoint.x, 20 + 50 * oldPoint.y, 50, 50));
                            g.fill(new Rectangle(20 + 50 * killPoint.x, 20 + 50 * killPoint.y, 50, 50));
                            pointsMine.remove(killPoint);
                            for (int j = 0; j < listMine.size(); j++) {
                                if (listMine.get(j).isHere(killPoint.x, killPoint.y)) {
                                    listMine.remove(j);
                                }
                            }
                            g.setColor(Color.BLACK);
                            for (int j = 0; j <= 8; j++) {
                                g.drawLine(20 + 50 * j, 20, 20 + 50 * j, 420);
                                g.drawLine(20, 20 + 50 * j, 420, 20 + 50 * j);
                            }
                            listOpponent.get(i).x = newPoint.x;
                            listOpponent.get(i).y = newPoint.y;
                            if (newPoint.y == 7) {
                                listOpponent.get(i).isSuper = true;
                            }
                            try {
                                if (!resp.get(7).equals("3")) {
                                    jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("YourMove"));
                                    yourStep = true;
                                    if (againOpp) {
                                        jTextArea1.append(":" + String.valueOf((char) (72 - newPoint.x)) + String.valueOf(1 + newPoint.y));
                                    } else {
                                        jTextArea1.append(String.valueOf((char) (72 - oldPoint.x)) + String.valueOf(1 + oldPoint.y) + ":" + String.valueOf((char) (72 - newPoint.x)) + String.valueOf(1 + newPoint.y));
                                    }
                                    againOpp = true;
                                } else {
                                    jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("OneMoreOpponent"));
                                    yourStep = false;
                                    if (againOpp) {
                                        jTextArea1.append(":" + String.valueOf((char) (72 - newPoint.x)) + String.valueOf(1 + newPoint.y) + "\r\n");
                                    } else {
                                        jTextArea1.append(String.valueOf((char) (72 - oldPoint.x)) + String.valueOf(1 + oldPoint.y) + ":" + String.valueOf((char) (72 - newPoint.x)) + String.valueOf(1 + newPoint.y) + "\r\n");
                                    }
                                    againOpp = false;
                                }
                                jButton4.setEnabled(yourStep);
                                jButton5.setEnabled(yourStep);
                            } catch (Exception e) {
                                Logger.getLogger(GameFrame.class.getName()).log(Level.SEVERE, null, e);
                            }
                            drawCheck(jPanel1, listOpponent.get(i), false);
                            CheckEnd();

                        }
                    }
                }
                if (resp.get(0).trim().equals("4")) {
                    ArrayList<String> msg = new ArrayList<String>();
                    if (JOptionPane.showConfirmDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("DrawPropose"), java.util.ResourceBundle.getBundle("app/Bundle").getString("Draw"), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                        msg.add("40");
                    } else {
                        msg.add("41");
                    }

                    ByteBuffer msgBuf = ByteBuffer.wrap(ObjectToBytes(msg));
                    socket.write(msgBuf);
                    msgBuf.rewind();
                }

                if (resp.get(0).trim().equals("40")) {
                    JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("OpponentAgreedDraw"));
                    EndGame();
                    jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("Draw"));
                }
                if (resp.get(0).trim().equals("41")) {
                    JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("OpponentRefuseDraw"));
                }
                if (resp.get(0).trim().equals("6")) {
                    JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("OpponentSurrender"));
                    EndGame();
                    JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("OpponentSurrenderLabel"));
                }
            }
        }
    }

    void CheckEnd() {
        if (listMine.size() == 0) {
            JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("YouWon") + "." + java.util.ResourceBundle.getBundle("app/Bundle").getString("GameEnd"));
            jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("YouWon"));
            EndGame();
        } else {
            if (listOpponent.size() == 0) {
                JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("YouLose") + "." + java.util.ResourceBundle.getBundle("app/Bundle").getString("GameEnd"));
                EndGame();
                jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("YouLose"));
            }
        }
    }

    void EndGame() {
        jButton1.setEnabled(true);
        jButton2.setEnabled(true);
        jButton4.setEnabled(false);
        jButton5.setEnabled(false);
        yourStep = false;
        game = false;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (serverSocket != null) {
            if (serverSocket.isOpen()) {
                try {
                    //serverSocket.socket().close();
                    selector.close();

                    serverSocket.close();

                } catch (Exception ex) {
                    Logger.getLogger(GameFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        choose = false;
        ip = "";
        port = 0;
        ConnectionFrame form = new ConnectionFrame(this, true, true);
        form.setVisible(true);

        if (choose) {
            try {
                jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("WaitingOpponent"));
                selector = Selector.open();
                serverSocket = ServerSocketChannel.open();
                serverSocket.bind(new InetSocketAddress("localhost", port));
                serverSocket.configureBlocking(false);
                serverSocket.register(selector, SelectionKey.OP_ACCEPT);
                buffer = ByteBuffer.allocate(2048);
                ServerTask t = new GameFrame.ServerTask();
                jButton1.setEnabled(false);
                jButton2.setEnabled(false);
                jButton4.setEnabled(false);
                jButton5.setEnabled(false);
                t.execute();
            } catch (Exception ex) {
                ex.printStackTrace();
                Logger.getLogger(GameFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("ServerError") + ex.getMessage(), "Connect", JOptionPane.ERROR_MESSAGE);
                return;
            }

            drawTable(jPanel1);
            Initialize(true);
            client = false;
            yourStep = false;

        }


    }//GEN-LAST:event_jButton1ActionPerformed
    void Initialize(boolean creator) {
        listMine = new ArrayList<Check>();
        listMine.add(new Check(!creator, false, 0, 7));
        listMine.add(new Check(!creator, false, 2, 7));
        listMine.add(new Check(!creator, false, 4, 7));
        listMine.add(new Check(!creator, false, 6, 7));
        listMine.add(new Check(!creator, false, 1, 6));
        listMine.add(new Check(!creator, false, 3, 6));
        listMine.add(new Check(!creator, false, 5, 6));
        listMine.add(new Check(!creator, false, 7, 6));
        listMine.add(new Check(!creator, false, 0, 5));
        listMine.add(new Check(!creator, false, 2, 5));
        listMine.add(new Check(!creator, false, 4, 5));
        listMine.add(new Check(!creator, false, 6, 5));
        listOpponent = new ArrayList<Check>();
        listOpponent.add(new Check(creator, false, 1, 0));
        listOpponent.add(new Check(creator, false, 3, 0));
        listOpponent.add(new Check(creator, false, 5, 0));
        listOpponent.add(new Check(creator, false, 7, 0));
        listOpponent.add(new Check(creator, false, 0, 1));
        listOpponent.add(new Check(creator, false, 2, 1));
        listOpponent.add(new Check(creator, false, 4, 1));
        listOpponent.add(new Check(creator, false, 6, 1));
        listOpponent.add(new Check(creator, false, 1, 2));
        listOpponent.add(new Check(creator, false, 3, 2));
        listOpponent.add(new Check(creator, false, 5, 2));
        listOpponent.add(new Check(creator, false, 7, 2));
        pointsMine = new ArrayList<Point>();
        pointsMine.add(new Point(0, 7));
        pointsMine.add(new Point(2, 7));
        pointsMine.add(new Point(4, 7));
        pointsMine.add(new Point(6, 7));
        pointsMine.add(new Point(1, 6));
        pointsMine.add(new Point(3, 6));
        pointsMine.add(new Point(5, 6));
        pointsMine.add(new Point(7, 6));
        pointsMine.add(new Point(0, 5));
        pointsMine.add(new Point(2, 5));
        pointsMine.add(new Point(4, 5));
        pointsMine.add(new Point(6, 5));
        pointsOpponent = new ArrayList<Point>();
        pointsOpponent.add(new Point(1, 0));
        pointsOpponent.add(new Point(3, 0));
        pointsOpponent.add(new Point(5, 0));
        pointsOpponent.add(new Point(7, 0));
        pointsOpponent.add(new Point(0, 1));
        pointsOpponent.add(new Point(2, 1));
        pointsOpponent.add(new Point(4, 1));
        pointsOpponent.add(new Point(6, 1));
        pointsOpponent.add(new Point(1, 2));
        pointsOpponent.add(new Point(3, 2));
        pointsOpponent.add(new Point(5, 2));
        pointsOpponent.add(new Point(7, 2));
        for (int i = 0; i < listMine.size(); i++) {
            drawCheck(jPanel1, listMine.get(i), false);
            drawCheck(jPanel1, listOpponent.get(i), false);
        }
    }
    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
        if (!yourStep) {
            return;
        }
        Point p = evt.getPoint();
        if ((p.x <= 20) || (p.x >= 420) || (p.y <= 20) || (p.y >= 420)) {
            for (int i = 0; i < listMine.size(); i++) {
                if (listMine.get(i).isHere(xSelected, ySelected)) {
                    drawCheck(jPanel1, listMine.get(i), false);
                }
            }
            xSelected = -1;
            ySelected = -1;
            return;
        }
        int x = (p.x - 20) / 50;
        int y = (p.y - 20) / 50;
        if (pointsMine.contains(new Point(x, y))) {
            for (int i = 0; i < listMine.size(); i++) {
                if (listMine.get(i).isHere(xSelected, ySelected)) {
                    drawCheck(jPanel1, listMine.get(i), false);
                }
                if (listMine.get(i).isHere(x, y)) {
                    drawCheck(jPanel1, listMine.get(i), true);
                    selectedCheck = listMine.get(i);

                }
            }
            xSelected = x;
            ySelected = y;
        } else {
            if ((xSelected == -1) || (ySelected == -1)) {
                return;
            }
            if (checkStep(selectedCheck, x, y)) {
                for (int i = 0; i < listMine.size(); i++) {
                    if (listMine.get(i).isHere(xSelected, ySelected)) {
                        drawCheck(jPanel1, listMine.get(i), false);
                    }
                }
                Graphics2D g = (Graphics2D) jPanel1.getGraphics();
                g.setColor(Color.GRAY);
                if ((xSelected > -1) && (ySelected > -1)) {
                    g.fill(new Rectangle(20 + 50 * xSelected, 20 + 50 * ySelected, 50, 50));
                }
                if (capture) {
                    g.fill(new Rectangle(20 + 50 * kill.x, 20 + 50 * kill.y, 50, 50));
                    pointsOpponent.remove(kill);
                    for (int j = 0; j < listOpponent.size(); j++) {
                        if (listOpponent.get(j).isHere(kill.x, kill.y)) {
                            listOpponent.remove(j);
                        }
                    }
                }
                g.setColor(Color.BLACK);
                for (int j = 0; j <= 8; j++) {
                    g.drawLine(20 + 50 * j, 20, 20 + 50 * j, 420);
                    g.drawLine(20, 20 + 50 * j, 420, 20 + 50 * j);
                }
                pointsMine.remove(new Point(xSelected, ySelected));
                pointsMine.add(new Point(x, y));
                ArrayList<String> message = new ArrayList<String>();
                if (capture) {
                    message.add("2");

                } else {
                    message.add("1");
                }
                message.add(String.valueOf(xSelected));
                message.add(String.valueOf(ySelected));
                message.add(String.valueOf(x));
                message.add(String.valueOf(y));
                if (capture) {

                    message.add(String.valueOf(kill.x));
                    message.add(String.valueOf(kill.y));
                    if (checkCaptureOnCheck(new Check(selectedCheck.black, selectedCheck.isSuper, x, y)).size() > 0) {
                        message.add("3");
                        if (client) {
                            if (againMine) {
                                jTextArea1.append(":" + String.valueOf((char) (72 - x)) + String.valueOf(1 + y));
                            } else {
                                jTextArea1.append(String.valueOf((char) (72 - xSelected)) + String.valueOf(1 + ySelected) + ":" + String.valueOf((char) (72 - x)) + String.valueOf(1 + y));
                            }
                            againMine = true;
                        } else {
                            if (againMine) {
                                jTextArea1.append(":" + String.valueOf((char) (65 + x)) + String.valueOf(8 - y));
                            } else {
                                jTextArea1.append(String.valueOf((char) (65 + xSelected)) + String.valueOf(8 - ySelected) + ":" + String.valueOf((char) (65 + x)) + String.valueOf(8 - y));
                            }
                            againMine = false;

                        }

                        jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("OneMoreYour"));
                        yourStep = true;
                        CheckEnd();

                    } else {
                        message.add("1");
                        if (againMine) {
                            if (client) {
                                jTextArea1.append(String.valueOf(":" + String.valueOf((char) (72 - x)) + String.valueOf(1 + y)) + "\r\n");
                            } else {

                                jTextArea1.append(String.valueOf(":" + String.valueOf((char) (65 + x)) + String.valueOf(8 - y)) + "\r\n");
                            }
                        } else if (client) {
                            jTextArea1.append(String.valueOf((char) (72 - xSelected)) + String.valueOf(1 + ySelected) + ":" + String.valueOf((char) (72 - x)) + String.valueOf(1 + y) + "\r\n");
                        } else {
                            jTextArea1.append(String.valueOf((char) (65 + xSelected)) + String.valueOf(8 - ySelected) + ":" + String.valueOf((char) (65 + x)) + String.valueOf(8 - y) + "\r\n");
                        }
                        againMine = false;
                        jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("WaitingMove"));
                        yourStep = false;
                    }
                } else {
                    jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("WaitingMove"));
                    yourStep = false;
                    if (client) {
                        jTextArea1.append(String.valueOf((char) (72 - xSelected)) + String.valueOf(1 + ySelected) + "-" + String.valueOf((char) (72 - x)) + String.valueOf(1 + y) + "\r\n");
                    } else {
                        jTextArea1.append(String.valueOf((char) (65 + xSelected)) + String.valueOf(8 - ySelected) + "-" + String.valueOf((char) (65 + x)) + String.valueOf(8 - y) + "\r\n");
                    }
                }
                jButton4.setEnabled(yourStep);
                jButton5.setEnabled(yourStep);

                ByteBuffer buff = ByteBuffer.wrap(ObjectToBytes(message));
                try {
                    buff.compact();
                    buff.flip();
                    int f = socket.write(buff);

                    System.out.println("S: " + f);
                    buff.flip();
                    buff.clear();
                } catch (IOException ex) {
                    Logger.getLogger(GameFrame.class.getName()).log(Level.SEVERE, null, ex);
                    //JOptionPane.showMessageDialog(null, "Вход не выполнен! " + ex.getMessage(), "Подключение", JOptionPane.ERROR_MESSAGE);
                }

                selectedCheck.x = x;
                selectedCheck.y = y;
                if (y == 0) {
                    selectedCheck.isSuper = true;
                }
                xSelected = -1;
                ySelected = -1;

                drawCheck(jPanel1, selectedCheck, false);
            } else {
                System.out.print("no");
            }
        }
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (serverSocket != null) {
            try {
                serverSocket.socket().close();
            } catch (IOException ex) {
                Logger.getLogger(GameFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        choose = false;
        ip = "";
        port = 0;
        ConnectionFrame form = new ConnectionFrame(this, true, false);
        form.setVisible(true);
        client = true;
        if (choose) {
            try {
                socket = SocketChannel.open(new InetSocketAddress(ip, port));
                socket.configureBlocking(false);
                ArrayList<String> message = new ArrayList<String>();
                message.add("0");
                message.add(password);
                ByteBuffer buf = ByteBuffer.wrap(ObjectToBytes(message));
                buf.compact();
                buf.flip();
                socket.write(buf);
                buf.flip();
                socket.configureBlocking(true);
                byte[] a = new byte[0];
                int read = 0;
                while ((read = socket.read(buf)) > 0) {
                    socket.configureBlocking(false);
                    buf.flip();
                    byte[] bytes = new byte[buf.limit()];
                    buf.get(bytes);
                    byte[] newArray = new byte[a.length + bytes.length];
                    System.arraycopy(a, 0, newArray, 0, a.length);
                    System.arraycopy(bytes, 0, newArray, a.length, bytes.length);
                    a = newArray;
                    buf.clear();
                }

                ArrayList<String> resp = (ArrayList<String>) BytesToObject(a);
                if (resp.get(0).equals("7")) {
                    JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("SuccessConnection"), "Connect", JOptionPane.INFORMATION_MESSAGE);
                    drawTable(jPanel1);
                    Initialize(false);
                    jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("WaitingMove"));
                    t = new GameFrame.ClientTask();
                    t.execute();
                    jButton1.setEnabled(false);
                    jButton2.setEnabled(false);
                    jButton4.setEnabled(false);
                    jButton5.setEnabled(false);
                }
                if (resp.get(0).equals("8")) {
                    JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("WrongPassword"), "Connect", JOptionPane.ERROR_MESSAGE);
                    EndGame();
                    jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("WrongPassword"));
                }
                if (resp.get(0).equals("9")) {
                    JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("BusyServer"), "Connect", JOptionPane.ERROR_MESSAGE);
                    EndGame();
                    jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("BusyServer"));

                }
            } catch (IOException ex) {
                Logger.getLogger(GameFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("NoSuccessConnection"), "Connect", JOptionPane.ERROR_MESSAGE);
                EndGame();

            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        ArrayList<String> message = new ArrayList<String>();
        message.add("4");
        ByteBuffer buf = ByteBuffer.wrap(ObjectToBytes(message));
        buf.compact();
        buf.flip();
        try {
            socket.write(buf);
        } catch (IOException ex) {
            Logger.getLogger(GameFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        buf.flip();
        JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("DrawRequestSend"));
        yourStep = false;
        jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("WaitingResponseDraw"));
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        ArrayList<String> message = new ArrayList<String>();
        message.add("6");
        ByteBuffer buf = ByteBuffer.wrap(ObjectToBytes(message));
        buf.compact();
        buf.flip();
        try {
            socket.write(buf);
        } catch (IOException ex) {
            Logger.getLogger(GameFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        buf.flip();
        JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("YouSurrender") + java.util.ResourceBundle.getBundle("app/Bundle").getString("GameEnd"));
        EndGame();
        jLabel2.setText(java.util.ResourceBundle.getBundle("app/Bundle").getString("YouLose"));
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("app/Bundle").getString("Rules"));
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // TODO add your handling code here:
        if (game) {
            drawTable(jPanel1);
            for (int i = 0; i < listMine.size(); i++) {
                drawCheck(jPanel1, listMine.get(i), false);
            }
            for (int i = 0; i < listOpponent.size(); i++) {
                drawCheck(jPanel1, listOpponent.get(i), false);
            }
        }
    }//GEN-LAST:event_formWindowGainedFocus
    boolean checkStep(Check check, int newX, int newY) {
        if ((pointsMine.contains(new Point(newX, newY))) || (pointsOpponent.contains(new Point(newX, newY)))) {
            return false;
        }
        if (checkCaptureInBoard()) {
            capture = true;
            if (check.isSuper) {
                if (Math.abs(check.x - newX) != Math.abs(check.y - newY)) {
                    return false;
                } else {
                    Point p = new Point(newX, newY);
                    for (int i = 0; i < killed.size(); i++) {
                        if ((killed.get(i).x < Math.max(newX, xSelected)) && (killed.get(i).x < Math.max(newX, xSelected)) && (killed.get(i).y > Math.min(newY, ySelected) && (killed.get(i).y > Math.min(newY, ySelected)))) {
                            kill = killed.get(i);
                        }
                    }
                    return (checkCaptureOnCheck(check).contains(p));
                }
            } else {
                Point p = new Point(newX, newY);
                return (checkCaptureOnCheck(check).contains(p));
            }
        } else {
            capture = false;
            if (check.isSuper) {
                if (Math.abs(check.x - newX) != Math.abs(check.y - newY)) {
                    return false;
                } else {
                    int lx = check.x - newX;
                    int ly = check.y - newY;
                    for (int i = Math.abs(lx) / lx; i == lx + 1 * Math.abs(lx) / lx; i = i + Math.abs(lx) / lx) {
                        for (int j = Math.abs(ly) / ly; j == ly + 1 * Math.abs(ly) / ly; j = j + Math.abs(ly) / ly) {
                            for (int k = 0; k < listMine.size(); k++) {
                                if (listMine.get(j).isHere(check.x + i, check.y + j)) {
                                    return false;
                                }
                            }
                            for (int k = 0; k < listOpponent.size(); k++) {
                                if (listOpponent.get(j).isHere(check.x + i, check.y + j)) {
                                    return false;
                                }
                            }
                        }
                    }
                }
                return true;
            } else {
                return (((check.x - 1 == newX) || (check.x + 1 == newX)) && ((check.y - 1 == newY)));
            }
        }
    }

    boolean checkCaptureInBoard() {
        for (int i = 0; i < listMine.size(); i++) {
            if (checkCaptureOnCheck(listMine.get(i)).size() > 0) {
                return true;
            }
        }
        return false;
    }

    ArrayList<Point> checkCaptureOnCheck(Check check) {
        ArrayList<Point> p = new ArrayList<Point>();

        if (check.isSuper) {
            killed.clear();
            int d1 = 0, d2 = 0, d3 = 0, d4 = 0;
            for (int i = 1; i < 7; i++) {
                if ((check.x + i <= 7) && (check.x + i >= 0) && (check.y + i >= 0) && (check.y + i <= 7) && (d1 != 2)) {
                    if (pointsOpponent.contains(new Point(check.x + i, check.y + i))) {
                        if (!((pointsMine.contains(new Point(check.x + (i + 1), check.y + (i + 1)))) || (pointsOpponent.contains(new Point(check.x + (i + 1), check.y + (i + 1))))) || (d1 == 0)) {
                            if (d1 == 0) {
                                killed.add(new Point(check.x + i, check.y + i));
                                if ((check.x + (i + 1) <= 7) || (check.y + (i + 1) <= 7)) {
                                    p.add(new Point(check.x + (i + 1), check.y + (i + 1)));
                                    d1 = 2;
                                } else {
                                    d1 = 1;
                                }

                            } else {
                                d1 = 2;
                            }
                        }
                    } else if (d1 == 1) {
                        if ((pointsOpponent.contains(new Point(check.x + i, check.y + i))) || (pointsMine.contains(new Point(check.x + i, check.y + i)))) {
                            d1 = 2;
                        } else {
                            p.add(new Point(check.x + i, check.y + i));
                        }
                    }
                }
                if ((check.x - i <= 7) && (check.x - i >= 0) && (check.y + i >= 0) && (check.y + i <= 7) && (d2 != 2)) {
                    if (pointsOpponent.contains(new Point(check.x - i, check.y + i))) {

                        if (!((pointsMine.contains(new Point(check.x - (i + 1), check.y + (i + 1)))) || (pointsOpponent.contains(new Point(check.x - (i + 1), check.y + (i + 1))))) || (d2 == 0)) {
                            if (d2 == 0) {
                                killed.add(new Point(check.x - i, check.y + i));
                                if ((check.x - (i + 1) >= 0) || (check.y + (i + 1) <= 7)) {
                                    p.add(new Point(check.x - (i + 1), check.y - (i + 1)));
                                    d2 = 2;
                                } else {
                                    d2 = 1;
                                }
                            }
                        }

                    } else if (d2 == 1) {
                        if ((pointsOpponent.contains(new Point(check.x - i, check.y + i))) || (pointsMine.contains(new Point(check.x - i, check.y + i)))) {
                            d2 = 2;
                        } else {
                            p.add(new Point(check.x - i, check.y + i));
                        }
                    }
                }
                if ((check.x + i <= 7) && (check.x + i >= 0) && (check.y - i >= 0) && (check.y - i <= 7) && (d3 != 2)) {
                    if (pointsOpponent.contains(new Point(check.x + i, check.y - i))) {

                        if (!((pointsMine.contains(new Point(check.x + (i + 1), check.y - (i + 1)))) || (pointsOpponent.contains(new Point(check.x + (i + 1), check.y - (i + 1))))) || (d3 == 0)) {
                            if (d3 == 0) {
                                killed.add(new Point(check.x + i, check.y - i));
                                if ((check.x + (i + 1) <= 7) || (check.y - (i + 1) >= 0)) {
                                    p.add(new Point(check.x + (i + 1), check.y - (i + 1)));
                                    d3 = 2;
                                } else {
                                    d3 = 1;
                                }
                            }

                        } else if (d3 == 1) {
                            if ((pointsOpponent.contains(new Point(check.x + i, check.y - i))) || (pointsMine.contains(new Point(check.x + i, check.y - i)))) {
                                d3 = 2;
                            } else {
                                p.add(new Point(check.x + i, check.y - i));
                            }
                        }
                    }
                    if ((check.x - i <= 7) && (check.x - i >= 0) && (check.y - i >= 0) && (check.y - i <= 7) && (d4 != 2)) {
                        if (pointsOpponent.contains(new Point(check.x - i, check.y - i))) {

                            if (!((pointsMine.contains(new Point(check.x - (i + 1), check.y - (i + 1)))) || (pointsOpponent.contains(new Point(check.x - (i + 1), check.y - (i + 1))))) || (d4 == 0)) {
                                if (d4 == 0) {
                                    killed.add(new Point(check.x - i, check.y - i));
                                    if ((check.x - (i + 1) >= 0) || (check.y - (i + 1) >= 0)) {
                                        p.add(new Point(check.x - (i + 1), check.y - (i + 1)));
                                        d4 = 2;
                                    } else {
                                        d4 = 1;
                                    }
                                }
                            }
                        }
                    } else if (d4 == 1) {
                        if ((pointsOpponent.contains(new Point(check.x - i, check.y - i))) || (pointsMine.contains(new Point(check.x - i, check.y - i)))) {
                            d4 = 2;
                        } else {
                            p.add(new Point(check.x - i, check.y - i));
                        }
                    }

                }
            }
        } else {

            if (pointsOpponent.contains(new Point(check.x + 1, check.y + 1))) {
                if (((check.x + 2 <= 7) && (check.y + 2 <= 7)) && !((pointsMine.contains(new Point(check.x + 2, check.y + 2))) || (pointsOpponent.contains(new Point(check.x + 2, check.y + 2))))) {
                    p.add(new Point(check.x + 2, check.y + 2));
                    kill = new Point(check.x + 1, check.y + 1);
                }
            }
            if (pointsOpponent.contains(new Point(check.x - 1, check.y + 1))) {
                if (((check.x - 2 >= 0) && (check.y + 2 <= 7)) && !((pointsMine.contains(new Point(check.x - 2, check.y + 2))) || (pointsOpponent.contains(new Point(check.x - 2, check.y + 2))))) {
                    p.add(new Point(check.x - 2, check.y + 2));
                    kill = new Point(check.x - 1, check.y + 1);
                }
            }
            if (pointsOpponent.contains(new Point(check.x + 1, check.y - 1))) {
                if (((check.x + 2 <= 7) && (check.y - 2 >= 0)) && !((pointsMine.contains(new Point(check.x + 2, check.y - 2))) || (pointsOpponent.contains(new Point(check.x + 2, check.y - 2))))) {
                    p.add(new Point(check.x + 2, check.y - 2));
                    kill = new Point(check.x + 1, check.y - 1);
                }
            }
            if (pointsOpponent.contains(new Point(check.x - 1, check.y - 1))) {
                if (((check.x - 2 >= 0) && (check.y - 2 >= 0)) && !((pointsMine.contains(new Point(check.x - 2, check.y - 2))) || (pointsOpponent.contains(new Point(check.x - 2, check.y - 2))))) {
                    p.add(new Point(check.x - 2, check.y - 2));
                    kill = new Point(check.x - 1, check.y - 1);
                }
            }
        }

        return p;
    }

    /**
     * @param args the command line arguments
     */
    void drawCheck(JPanel p, Check check, boolean isSelected) {
        Graphics2D g = (Graphics2D) p.getGraphics();
        g.setColor(Color.GRAY);
        g.fill(new Rectangle(20 + 50 * check.x, 20 + 50 * check.y, 50, 50));
        g.setColor(Color.BLACK);
        for (int i = 0; i <= 8; i++) {
            g.drawLine(20 + 50 * i, 20, 20 + 50 * i, 420);
            g.drawLine(20, 20 + 50 * i, 420, 20 + 50 * i);
        }
        if (check.isSuper) {
            g.setColor(Color.GREEN);
            g.fillOval(25 + 50 * check.x, 25 + 50 * check.y, 40, 40);
            if (check.black) {//черный цвет
                g.setColor(Color.BLACK);
                g.fillOval(35 + 50 * check.x, 35 + 50 * check.y, 20, 20);
            } else {
                g.setColor(Color.WHITE);
                g.fillOval(35 + 50 * check.x, 35 + 50 * check.y, 20, 20);
            }
        } else {
            if (check.black) {//черный цвет
                g.setColor(Color.BLACK);
                g.fillOval(25 + 50 * check.x, 25 + 50 * check.y, 40, 40);
            } else {
                g.setColor(Color.WHITE);
                g.fillOval(25 + 50 * check.x, 25 + 50 * check.y, 40, 40);
            }
        }
        g.setStroke(new BasicStroke(3));
        if (isSelected) {
            g.setColor(Color.RED);
        } else {
            g.setColor(Color.BLACK);
        }
        g.drawOval(25 + 50 * check.x, 25 + 50 * check.y, 40, 40);
    }

    void drawTable(JPanel p) {
        Graphics2D g = (Graphics2D) p.getGraphics();
        //рамка
        g.drawRect(20, 20, 400, 400);
        // сетка
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if ((i + j) % 2 == 1) {
                    g.setColor(Color.GRAY);
                } else {
                    g.setColor(Color.WHITE);
                }
                g.fill(new Rectangle(20 + 50 * i, 20 + 50 * j, 50, 50));
            }
        }
        g.setColor(Color.BLACK);
        for (int i = 0; i <= 8; i++) {
            g.drawLine(20 + 50 * i, 20, 20 + 50 * i, 420);
            g.drawLine(20, 20 + 50 * i, 420, 20 + 50 * i);
            if (i != 8) {

                if (client) {
                    g.drawString(String.valueOf(8 - i), 5, 400 - 50 * i);
                    g.drawString(String.valueOf(8 - i), 425, 400 - 50 * i);
                    g.drawString(String.valueOf((char) (72 - i)), 40 + 50 * i, 15);
                    g.drawString(String.valueOf((char) (72 - i)), 40 + 50 * i, 435);
                } else {
                    g.drawString(String.valueOf(i + 1), 5, 400 - 50 * i);
                    g.drawString(String.valueOf(i + 1), 425, 400 - 50 * i);
                    g.drawString(String.valueOf((char) (65 + i)), 40 + 50 * i, 15);
                    g.drawString(String.valueOf((char) (65 + i)), 40 + 50 * i, 435);
                }

            }
        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

}
